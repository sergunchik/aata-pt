<?xml version="1.0" encoding="UTF-8" ?>

<!-- This file is part of the book                 -->
<!--                                               -->
<!--   Abstract Algebra: Theory and Applications   -->
<!--                                               -->
<!-- Copyright (C) 1997-2017  Thomas W. Judson     -->
<!-- See the file COPYING for copying conditions.  -->

<chapter xml:id="crypt" xmlns:xi="http://www.w3.org/2001/XInclude">
	<title>Introdução a Criptografia</title>

	<introduction>

		<p>A Criptografia é a área que trata do envio e da recepção de mensagens secretas. O objetivo da criptografia é enviar mensagens de maneira que somente o destinatário desejado possa lê-los. Além disso, ao recebê-la, o destinatário requer alguma garantia de autenticidade, isto é, que não foi enviada por alguém que está tentando o enganar. A criptografia moderna depende fortemente da álgebra abstrata e da teoria de números.</p> 

		<p>Chamaremos a mensagem que estamos enviando de <term>texto claro</term><idx><h>Texto claro</h></idx>. A mensagem codificada será chamada de <term>texto cifrado</term><idx><h>Texto cifrado</h></idx>. Tanto o texto claro como o texto cifrado estão escritos em um <term>alfabeto</term>, que consiste de <term>letras</term> ou <term>caracteres</term>. Os caracteres podem incluir não somente  as letras usuais como A, <m>\ldots</m>, Z e a, <m>\ldots</m>, z mas também dígitos, caracteres de pontuação e espaços. Um <term>criptossistema</term>,<idx><h>Criptossistema</h><h>definição de</h></idx> ou <term>cifrado</term>,<idx><h>Cifrado</h></idx>  tem duas partes: <term>encriptação</term>, o processo de transformar um texto claro em um texto cifrado, e <term>decriptação</term>, a transformação inversa do texto cifrado em texto plano.</p>
 
		<p>Existem diversas famílias de criptossistemas, cada uma se distingue por um algoritmo particular de encriptação. Os criptossistemas em uma família específica se distinguem entre eles por um parâmetro da função de encriptação chamado <term>key (chave)</term><idx><h>Key</h><h>definição de</h></idx>. Um criptossistema clássico tem uma chave, que deve ser mantida em segredo,  só é conhecida pelo remetente e pelo destinatário da mensagem. Se uma pessoa <m>A</m> deseja enviar mensagens secretas a duas pessoas diferentes <m>B</m> e <m>C</m>, e não quer que <m>B</m> entenda a mensagem enviada para <m>C</m> e vice-versa, então <m>A</m> deve usar duas chaves diferentes, um criptossistema para trocar mensagens com <m>B</m>, e outro para trocar mensagens com <m>C</m>.</p>

		<p>Os sistemas que usam duas chaves separadas, uma para encriptar e outra para decriptar, são conhecidos como <term>criptossistemas de chave pública (public key cryptosystems)</term><idx><h>Criptossistemas de chave pública</h></idx>. Como o conhecimento da chave de encriptação não permite acesso a chave de decriptação, a primeira pode ser colocada como pública. Um criptossistema de chave pública permite tanto a <m>A</m> como a <m>B</m> enviar mensagens a <m>C</m> usando a mesma chave de encriptação.  Qualquer um pode encriptar mensagens para enviar a <m>C</m>, mas só <m>C</m> sabe como decriptar essas mensagens.</p>

	</introduction>

	<section xml:id="section-private-key-crypt">
		<title>Criptografia de Chave Privada</title>
		
		<p>Em criptossistemas de chave <term>única</term><idx><h>Chave</h><h>única</h></idx><idx><h>Criptossistema</h><h>chave única</h></idx> ou <term>criptossistema de chave privada</term><idx><h>Chave</h><h>privada</h></idx><idx><h>Criptossistema</h><h>chave privada</h></idx> a mesma clave é usada tanto para encriptar como para decriptar as mensagens. Para encriptar um texto claro, aplicamos na mensagem alguma função que é mantida em segredo, digamos <m>f</m>. Esta função devolve uma mensagem encriptada.  Dada a forma encriptada da mensagem, podemos recuperar a mensagem original aplicando a transformação inversa <m>f^{-1}</m>. A transformação <m>f</m> deve ser relativamente fácil de calcular, assim como também deve ser <m>f^{-1}</m>; mas, devemos ter em mente que <m>f</m> deve ser muito difícil de adivinhar a partir de exemplos disponíveis de mensagens encriptadas.</p>


		<example xml:id="example-crypt-caesar">
			<p>Um dos primeiros e mais famosos criptossistemas foi o código de deslocamento usado por Júlio César.  Primeiro convertemos o alfabeto em números fazendo <m>\text{A}  = 00, \text{B}  = 01, \ldots, \text{Z} = 25</m>. A função codificadora será 
				<me>f(p) = p + 3 \bmod 26;</me>
			isto é, <m>A \mapsto D, B \mapsto E, \ldots, Z \mapsto C</m>. A função decodificadora será 
				<me>f^{-1}(p) = p - 3 \bmod 26 = p + 23 \bmod 26.</me>
			Suponha que recebemos a mensagem encriptada DOJHEUD. Para decriptar esta mensagem, convertemos a números:  
				<me>3, 14, 9, 7, 4, 20, 3.</me>
			Em seguida, aplicamos a transformação inversa para obter
				<me>0, 11, 6, 4, 1, 17, 0,</me>
			isto é ALGEBRA. Note que não exite nada de especial nos números 3 e 26, poderíamos usar um alfabeto maior ou um deslocamento diferente.</p>
		</example>
 
		<p>A <term>criptoanálise</term><idx><h>Criptoanálise</h></idx> se preocupa em decifrar uma mensagem encriptada recibida ou interceptada. Existem métodos de probabilidade e estatística que são de grande ajuda para decifrar mensagens interceptadas; por exemplo, a análise de frequência dos caracteres que aparecem na mensagem encriptada pode fazer sua decriptação possível.</p>

		<example xml:id="example-crypt-analysis">
			<p>Suponha que recebemos uma mensagem que sabemos que foi encriptada usando um deslocamento nas 26 letras do alfabeto. Para determinar o deslocamento, devemos encontrar <m>b</m> na equação <m>f(p) = p + b \bmod 26</m>. Podemos fazer isto usando análise de frequência.  A letra <m>\text{E} = 04</m> é a mais frequente no idioma inglês. Suponha que <m>\text{S} = 18</m> é a letra que ocorre com mais frequência no texto-cifrado.  Então temos uma boa razão para suspeitar que <m>18 = 4 + b \bmod 26</m>, e <m>b= 14</m>. Portanto, a função encriptadora mais provável é 
				<me>f(p) = p + 14 \bmod 26.</me>
			A função decriptadora correspondente é 
				<me>f^{-1}(p) = p + 12 \bmod 26.</me>
			Neste ponto é fácil determinar se a suspeita é ou não correta.</p>
		</example>

		<p>Códigos de deslocamento simples são exemplos de <term>criptossistemas monoalfabéticos</term><idx><h>Criptossistema</h><h>monoalfabético</h></idx>. Nestes cifrados um caractere no texto cifrado representa exatamente um caractere na mensagem original. Tais criptossistemas não são muito sofisticados e são muito fáceis de decifrar. De fato, em um deslocamento simples como o descrito no Exemplo<nbsp /><xref ref="example-crypt-caesar" />, existem só 26 chaves possíveis. Seria muito mais fácil testar todas do que usar a análise de frequência.</p> 

		<p>Investiguemos um criptossistema ligeiramente mais sofisticado. Suponha que a função encriptadora é dada por  
			<me>f(p) = ap + b \bmod 26.</me>
		Primeiro devemos determinar quando existe uma função decriptadora <m>f^{-1}</m>. Tal função existe quando podemos resolver a equação
			<me>c = ap + b \bmod 26</me>
		em <m>p</m>. Pela Proposição<nbsp /><xref ref="proposition-zn-equiv-classes" />, isso é possível precisamente quando <m>a</m> tem inverso, isto é quando <m>\gcd( a, 26) =1</m>. Neste caso 
			<me>f^{-1}(p) = a^{-1} p - a^{-1} b \bmod 26.</me>
		Um criptossistema deste tipo se denomina <term>criptossistema afim</term><idx><h>Criptossistema</h><h>afim</h></idx>.</p>
 
		<example xml:id="example-crypt-affine-crypt">
			<p>Consideremos o criptossistema afim <m>f(p) = ap + b \bmod 26</m>. Para que este criptossistema funcione, devemos escolher <m>a \in {\mathbb Z}_{26}</m> que seja inversível. Isso só é possível se <m>\gcd(a, 26) = 1</m>. Reconhecendo este fato,  escolheremos <m>a = 5</m> pois <m>\gcd(5, 26) = 1</m>. É muito fácil ver que <m>a^{-1} = 21</m>. Portanto, podemos definir nossa função de encriptação como <m>f(p) = 5p + 3 \bmod 26</m>. Logo, ALGEBRA se encripta como <m>3, 6, 7, 23, 8, 10, 3</m>, ou DGHXIKD. A função decriptadora será   
				<me>f^{-1}(p) = 21 p - 21 \cdot 3 \bmod 26 = 21 p + 15 \bmod 26.</me></p>
		</example> 
 
		<p>Um criptossistema seria mais seguro se uma letra do texto cifrado pudesse representar mais de uma letra do texto claro.  Para dar um exemplo deste tipo de criptossistema, chamado <term>criptossistema polialfabético</term>,<idx><h>Criptosistema</h><h>polialfabético</h></idx> generalizaremos os códigos afins usando matrizes. A idea funciona basicamente como antes; no entanto, no lugar de encriptar uma letra por vez, encriptaremos pares de letras.  Podemos armazenar um par de letras <m>p_1</m> e <m>p_2</m> em um vetor  
			<me>{\mathbf p} = 
			\begin{pmatrix}<![CDATA[
			p_1 \\ p_2
			]]>\end{pmatrix}.</me>
		Seja <m>A</m> uma matriz inversível de <m>2 \times 2</m> com coeficientes em <m>{\mathbb Z}_{26}</m>. Podemos definir uma função encriptadora como
			<me>f({\mathbf p}) = A {\mathbf p} + {\mathbf b},</me>
		donde <m>{\mathbf b}</m> é um vetor columa fixo e as operações matriciais são feitas em <m>{\mathbb Z}_{26}</m>. A função decriptadora deve ser
			<me>f^{-1}({\mathbf p}) = A^{-1} {\mathbf p} - A^{-1} {\mathbf b}.</me></p>
 
		<example xml:id="example-crypt-help">
			<p>Suponha que desejamos encriptar a palavra HELP. Os números correspondentes são <m>7, 4, 11, 15</m>. Se
				<me>A =
				\begin{pmatrix}<![CDATA[
				3 & 5 \\
				1 & 2
				]]>\end{pmatrix},</me>
			então
				<me>A^{-1} 
				=
				\begin{pmatrix}<![CDATA[
				2 & 21 \\
				25 & 3
				]]>\end{pmatrix}.</me>
			Se <m>{\mathbf b} = ( 2, 2)^{\rm t}</m>, então a mensagem encriptada fica como RRGR. A letra R representa mais de uma letra no texto claro.</p>
		</example>
 
		<p>A análise de frequência ainda é realizável em um criptosistema polialfabético, pois temos boa informação sobre a frequência relativa de pares de letras no idioma inglês. O par <em>th</em> aparece com grande frequência; o par <em>qz</em> nunca aparece.  Para evitar decriptação por parte de um terceiro, devemos usar uma matriz maior do que a usada no Exemplo<nbsp /><xref ref="example-crypt-help" />.</p>

<!-- TWJ 4/7/2010 Need to resolve this reference -->

	</section>

	<section xml:id="section-public-key-crypt">
		<title>Criptografia de Chave Pública</title>

		<introduction>
 
			<p>Se criptossistemas tradicionais são usados, qualquer um que saiba o suficiente de encriptar uma mensagem também saberá decriptar uma mensagem interceptada. Em 1976, W. Diffie<idx><h>Diffie, W.</h></idx> e M. Hellman<idx><h>Hellman, M.</h></idx> propuseram a criptografia de chave pública, que é baseada na observação de que os processos de encriptação e decriptação não precisam ter a mesma chave. Isso remove o requerimento de que a chave de encriptação seja secreta. A função encriptadora <m>f</m> deve ser relativamente fácil de calcular, mas <m>f^{-1}</m> tem que ser muito difícil de calcular sem alguma informação adicional, de maneira que alguém que conheça a chave de encriptação, não possa descobrir a clave de decriptação sem passar por cálculos bastante difíceis. É interessante notar que até hoje, nenhum sistema que foi proposto foi provado ser <q>unidirecional;</q> isto é, para nenhum criptossistema de chave pública existente, foi demonstrado que seja computacionalmente proibitivo decifrar a mensagem somente com o conhecimento da chave de encriptação.</p>

		</introduction>

		<subsection xml:id="crypt-subsection-rsa">
			<title>O Criptossistema <acro>RSA</acro></title>

 				<p>O Criptossistema <acro>RSA</acro> introduzido por R. Rivest<idx><h>Rivest, R.</h></idx>, A.  Shamir<idx><h>Shamir, A.</h></idx>, e L. Adleman<idx><h>Adleman, L.</h></idx> em 1978, se baseia na dificultade de fatorar número grandes. Ainda que não seja difícil encontrar dois primos grandes e multiplicá-los, fatorar um número de 150 dígitos que seja o produto de dois primos grandes iria requerer 100 milhões computadores operando 10 milhões de instruções por segundo durantes 50 milhões de anos com os melhores algoritmos conhecidos no princípio da década de 1990.  Mesmo que os algoritmos tenham melhorado, fatorar um produto de dois primos grandes segue sendo computacionalmente proibitivo.</p>

				<p>O Criptossistema <acro>RSA</acro><idx><h><acro>RSA</acro> criptossistema</h></idx><idx><h>Criptossistema</h><h><acro>RSA</acro></h></idx> funciona como segue. Suponha que escolhemos dois números primos <m>p</m> e <m>q</m> de 150 dígitos cada um. Depois calculamos seu produto <m>n= pq</m> e também calculamos <m>\phi(n) = m = (p - 1)(q-1)</m>, donde <m>\phi</m> é a função <m>\phi</m> de Euler.  Agora começamos a escolher inteiros aleatórios <m>E</m> até que encontremos um que seja relativamente primo com <m>m</m>; isto é, escolhemos <m>E</m> tal que <m>\gcd(E, m) = 1</m>. Usando o algoritmo de Euclides, podemos encontrar um número <m>D</m> tal que <m>DE \equiv 1 \pmod{m}</m>. Os números <m>n</m> e <m>E</m> agora são públicos.</p>
 
				<p>Suponha que a pessoa B (Bob) deseja enviar para pessoa A (Alice) uma mensagem através de um canal aberto (público). Como <m>E</m> e <m>n</m> são conhecidos por todo mundo, qualquer um pode encriptar mensagens. Bob primeiro converte sua mensagem em uma cadeia numérica de acordo com algum procedimento, digamos <m>\text{A}  = 00, \text{B}  = 02, \ldots, \text{Z}= 25</m>. Se for necessário, decomponha sua mensagem de maneira que cada pedaço seja um inteiro positivo menor que <m>n</m>.  Suponha que <m>x</m> é um desses pedaços.  Bob forma o número <m>y = x^E \mod n</m> e envia <m>y</m> para Alice. Para que Alice recupere <m>x</m>, ela só precisa calcular <m>x = y^D \bmod n</m>. Só Alice conhece <m>D</m>.</p>
 
			<example xml:id="example-crypt-rsa">
				<p>Antes de explorar a teoria por trás do criptossistema <acro>RSA</acro> ou tentar usar inteiros grandes, usaremos alguns inteiros pequenos simplesmente para ver que o sistema realmente funciona. Suponha que a mensagem que desejamos enviar, uma vez digitalizado é 25. Sejam <m>p = 23</m> e <m>q = 29</m>. Então 
					<me>n = pq = 667</me>
				e
					<me>\phi(n) = m = (p - 1)(q - 1) = 616.</me>
				Podemos escolher <m>E = 487</m>, pois <m>\gcd(616, 487) = 1</m>. A mensagem codificada é calculada da seguinte forma: 
					<me>25^{487} \bmod 667 = 169.</me>
				Este cálculo pode ser realizado usando o método dos quadrados repetidos descrito no Capítulo<nbsp /><xref ref="cyclic" />. Usando o algoritmo de Euclides, determinamos que <m>191 E = 1 + 151 m</m>; portanto, a chave de decriptação é <m>(n, D) = ( 667, 191)</m>. Podemos recuperar a mensagem original calculando  
					<me>169^{191} \bmod 667 = 25.</me></p>
			</example>

<!-- Message changed from 23 to 25 so that it does not match p.  Suggested by R. Beezer. -->
<!-- TWJ - 12/19/2011 -->

			<p>Examinemos agora porque o criptossistema <acro>RSA</acro> funciona.  Sabemos que <m>DE \equiv 1 \pmod{ m}</m>; logo, existe <m>k</m> tal que 
				<me>DE = km + 1 = k \phi(n) + 1.</me>
			Devemos considerar dois casos.  No primeiro caso suponha que <m>\gcd(x, n) = 1</m>.  Então, pelo Teorema<nbsp /><xref ref="theorem-eulers_theorem" />,
				<me>y^D = (x^E)^D = x^{DE} = x^{km + 1} = (x^{\phi(n)})^k x = (1)^k x = x \bmod n.</me>
			Desta maneira vemos que Alice recupera a mensagem original <m>x</m> quando calcula <m>y^D \bmod n</m>.</p>

			<p>Para o outro caso, suponha que <m>\gcd(x, n) \neq 1</m>.  Como <m>n = pq</m> e <m>x \lt n</m>, sabemos que <m>x</m> é um múltiplo de <m>p</m> ou um múltiplo de <m>q</m>, mas não de ambos.  Descreveremos somente a primeira possibilidade, pois a outra é completamente similar.  Então existe um inteiro <m>r</m>, com <m>r \lt q</m> e <m>x = rp</m>.  Notemos que temos <m>\gcd(x, q) = 1</m> e que <m>m=\phi(n)=(p - 1)(q - 1)=\phi(p)\phi(q)</m>.  Então, usando o Teorema<nbsp /><xref ref="theorem-eulers_theorem" />, mas agora mod <m>q</m>,
				<me>x^{km} = x^{k\phi(p)\phi(q)} = (x^{\phi(q)})^{k\phi(p)} = (1)^{k\phi(p)} = 1 \bmod q.</me>
			Existe um inteiro <m>t</m> tal que <m>x^{km}=1 + tq</m>. Logo, Alice também recupera a mensagem neste caso,
				<me>y^D = x^{km + 1} = x^{km} x = (1 + tq) x = x + tq(rp) = x + trn = x \bmod n.</me></p>


<!-- Demonstration expanded to two cases.  Suggested by Kevin Halasz. -->
<!-- RAB - 12/30/2011 -->

			<p>Podemos perguntar agora como alguém tentaria violar o criptossistema <acro>RSA</acro>. Para encontrar <m>D</m> dados <m>n</m> e <m>E</m>, necessitamos fatorar <m>n</m> e encontrar <m>D</m> usando o algoritmo de Euclides. Se sabemos que <m>667 = 23 \cdot 29</m> no Exemplo<nbsp /><xref ref="example-crypt-rsa" />, poderíamos recuperar <m>D</m>.</p>    

		</subsection>
		
		<subsection xml:id="crypt-subsection-message-verification">
			<title>Verificação da Mensagem</title>
 				
 			<p>Existe um problema de verificação de mensagens nos criptossistemas de chave pública. Como a chave codificadora é de conhecimento público, qualquer um tem a capacidade de enviar uma mensagem codificada.  Se Alice recebe uma mensagem de Bob, ela gostaria de poder verificar que realmente foi que Bob que enviou a mensagem. Suponha que a chave encriptadora de Bob é <m>(n', E')</m> e sua chave decriptadora é <m>(n', D')</m>.  Além disso, suponha que a chave encriptadora de Alice é <m>(n, E)</m> e que sua chave decriptadora é <m>(n, D)</m>.  Como as chaves encriptadoras são de conhecimento público, ambos podem trocar mensagens quando desejarem.  Bob quer garatir a Alice que a mensagem que está enviando é autêntica. Antes de enviar a mensagem <m>x</m> a Alice, Bob decripta <m>x</m> com sua própia chave secreta:
				<me>x' = x ^{D'} \bmod n'.</me>
			Qualquer um pode transformar <m>x'</m> de volta a <m>x</m> encriptando, mas só Bob tem a habilidade de formar <m>x'</m>. Agora Bob encripta <m>x'</m> com a chave pública de Alice formando 
				<me>y' = {x'}^E  \bmod n,</me>
			uma mensagem que só Alice pode decriptar.  Alice decripta a mensagem e logo encripta o resultado com a chave de encriptação de Bob para ler a mensagem original, uma mensagem que só pode ter sido enviada por Bob.</p>

		</subsection>
 
		<subsection xml:id="crypt-subsection-historical-note">
			<title>Nota Histórica</title>
			
			<p>A ideia de encriptar mensagens secretas vem desde a Grécia e Roma Antiga. Como sabemos, Júlio César usou um código de deslocamento simples para mandar e receber mensagens. No entanto, o estudo formal de encriptar e decriptar mensagens provavelmente começou com os árabes nos anos 1400. Nos séculos XV e XVI, matemáticos, tais quais Alberti e Viete, descobriram que criptossistemas monoalfabéticos não ofereciam uma segurança real. No século XIX, F. W. Kasiski estabeleceu métodos para violar sistemas em que uma letra do texto encriptado podia representar mais de uma letra do texto claro, se a mesma chave fosse usada várias vezes. Este descobrimento levou ao uso de criptossistemas com chaves que eram usadas só uma vez. A criptografia obteve fundamentos matemáticos firmes com os trabalhos de gente como W. Friedman e L. Hill no começo do século XX.</p>
 
			<p>O périodo que seguiu a Primeira Guerra Mundial viu a criação de máquinas especializadas na encriptação e decriptação de mensagens e os matemáticos trabalharam arduamente na criptografia durante a Segunda Guerra Mundial. Os esforços para violar os criptossistemas das nações do Eixo foram organizados na Inglaterra e nos Estados Unidos por matemáticos notáveis como Alan Turing e A. A. Albert. Os Aliados obtiveram uma tremenda vantagem na Segunda Guerra Mundial ao romper os sistemas de encriptação produzidos pela máquina Enigma da Alemanha e os cifrados Púrpura do Japão.</p>

			<p>Em 1970, o interesse na criptografia comercial começou a se solidificar. Havia uma necessidade crescente de proteger transações bancárias, dados informáticos e emails eletrônicos. No começo dos anos 1970, <acro>IBM</acro> desenvolveu e implementou <acro>LUZIFER</acro>, o precursor do padrão de encriptação de dados do National Bureau of Standards dos Estados Unidos.</p>

			<p>O conceito de um criptossistema de chave pública, devido a Diffie e Hellman, é muito recente (1976). Ele foi mais tarde desenvolvido por Rivest, Shamir e Adleman com o criptossistema <acro>RSA</acro> (1978). Ainda não sabemos o quão seguro esse criptossistema é. O criptossistema da mochila de decisão, fundamentado por Merkle e Hellman, foi quebrado. É ainda uma pergunta se o sistema <acro>RSA</acro> pode ou não ser violado. Em 1991, os Laboratórios <acro>RSA</acro> publicaram uma lista de semiprimos (números que tem exatamente dois fatores primos) com um prêmio em dinheiro para quem pudesse fatorá-los (<url href="http://www.emc.com/emc-plus/rsa-labs/historical/the-rsa-challenge-numbers.htm">http://www.emc.com/emc-plus/rsa-labs/historical/the-rsa-challenge-numbers.htm</url>).  Por mais que o desafio tenha terminado em 2007, muitos desses números ainda não foram fatorados.</p>
			
			<p>Houve bastante controversia com relação a investigação de criptossistemas e com a criptografia por si só. Em 1929, quando Henry Stimson, Secretário de Estado de Herbert Hoover, dissolveu a Câmara Negra (a divisão de criptografia do Departamento de Estado) com a justificativa ética de que <q>os cavalheiros leêm a correspondência de outros.</q>  Durante as últimas duas décadas do século XX, a Agência Nacional de Segurança (NSA) queria manter em segredo a informação sobre criptografia, ainda que a comunidade científica pedisse pelo direito de publicar a ciência básica relacionada ao assunto.  Atualmente, a pesquisa com relação a criptografia matemática e à teoria dos números computacionais é muito ativa, e os matemáticos têm a libertade de publicar seus resultados nestas áreas.</p> 

		</subsection>

		<xi:include href="./sage/crypt-info.xml" />

	</section>
 
 <xi:include href="./exercises/crypt.xml" />

	<exercises xml:id="crypt-exercises-additional">
		<title>Exercícios Adicionais: Primalidade e Fatoração</title>

		<p>No criptossistema <acro>RSA</acro> é importante ser capaz de encontrar números primos grandes com facilidade.  Da mesma forma, este criptosistema deixa de ser seguro se somos capazes de fatorar um número inteiro que seja o produto de dois números primos grandes. As soluções teóricas de ambos problemas são bastante simples. Para saber se um número <m>n</m> é primo ou para fatorar <m>n</m>, podemos usar tentativas de divisão. Simplesmente dividimos <m>n</m> entre <m>d = 2, 3, \ldots, \sqrt{n}</m>. Dessa forma obteremos uma fatoração ou <m>n</m> será primo sem nenhum <m>d</m> dividindo <m>n</m>.  O problema é que tais cálculos tomam muito tempo se <m>n</m> é muito grande.</p>

		<exercise>
			<statement>
				<p>Um algoritmo melhor para fatorar inteiros positivos ímpares é o <idx><h><term>Algoritmo de fatoração de Fermat</term></h></idx>.</p>

				<ol>
					<li><p>Seja <m>n= ab</m> um número ímpar composto. Demonstre que <m>n</m> pode ser escrito como a diferença de dois quadrados perfeitos:
						<me>n = x^2 - y^2 = (x - y)(x + y).</me>
					Portanto, um inteiro positivo ímpar pode ser factorado se e somente se podemos encontrar inteiros <m>x</m> e <m>y</m> tais que <m>n = x^2 - y^2</m>.</p></li>
					<li><p>Escreva um programa para implementar o seguinte algoritmo de fatoração baseado na observação da parte (a).  A expressão <c>ceiling(sqrt(n))</c> se refere ao menor inteiro que é maior ou igual a raiz quadrada de <m>n</m>. Escreva outro programa que use tentativas de divisão e compare a velocidade dos dois algoritmos. Qual deles é mais rápido e por quê?</p></li>
				</ol>

				<listing>
					<caption>algoritmo en pseudo-código</caption>
					<program>
						<input>
							x := ceiling(sqrt(n))
							y := 1

							1 : while x^2 - y^2 <![CDATA[>]]> n do
								y := y + 1

							if x^2 - y^2 <![CDATA[<]]> n then
								x := x + 1
								y := 1
								goto 1
							else if x^2 - y^2 = 0 then
								a := x - y
								b := x + y
								write n = a * b
						</input>
					</program>

				</listing>

			</statement>
		</exercise>

		<exercise>
			<title>Verificação de Primalidade</title>
			<statement>
				<p>Lembre do Pequno Teorema de Fermat do Capítulo<nbsp /><xref ref="cosets" />. Seja <m>p</m> um primo com <m>\gcd(a, p) = 1</m>. Então <m>a^{p-1} \equiv 1 \pmod{p}</m>.  Podemos usar o Pequeno Teorema de Fermat como um exame para primos. Por exemplo, 15 não pode ser primo pois <me>2^{15-1} \equiv 2^{14} \equiv 4 \pmod{15}.</me> Mas, 17 é potencialmente um primo pois
					<me>2^{17-1} \equiv 2^{16} \equiv 1 \pmod{17}.</me>
				Dizemos que um número composto impar <m>n</m> é um <term>pseudoprimo</term><idx><h>Pseudoprimo</h></idx> se 
					<me>2^{n-1} \equiv 1 \pmod{n}.</me>
				Quais dos seguintes números são primos e quais são pseudoprimos?
					<ol cols="3">
					
						<li><p>342</p></li>
					
						<li><p>811</p></li>
					
						<li><p>601</p></li>
					
						<li><p>561</p></li>
					
						<li><p>771</p></li>
					
						<li><p>631</p></li>
					
					</ol></p>
			</statement>
		</exercise>

		<exercise>
			<statement>
				<p>Seja <m>n</m> um número ímpar composto e <m>b</m> um inteiro positivo tal que <m>\gcd(b, n) = 1</m>. Se <m>b^{n-1} \equiv 1 \pmod{n}</m>, então <m>n</m> é um <term>pseudoprimo na base</term> <m>b</m>. Mostre que 341 é um pseudoprimo na base 2 mas não é um pseudoprimo na base 3.</p>
			</statement>
		</exercise>

		<exercise>
			<statement>
				<p>Escreve um programa para determinar todos os primos menores que 2000 usando tentativas de divisão. Escreva um segundo programa que determine todos os números menores que 2000 que sejam primos ou pseudoprimos. Compare a velocidade dos programas. Quantos pseudoprimos menores que 2000 existem?</p>
 
				<p>Existem números compostos que são pseudoprimos para todas as bases que são relativamente primos.  Esses números se chamam <term>números de Carmichael</term><idx><h>Números de Carmichael</h></idx>. O primeiro número de Carmichael é o <m>561 = 3 \cdot 11 \cdot 17</m>.  Em 1992, Alford, Granville e Pomerance demostraram que existem infinitos números de Carmichael [4].  Todavia, os números de Carmichael são muito escassos. Existem somente <m>2163</m> números de Carmichael menores que <m>25 \times 10^9</m>. Para testes de primalidade mais sofisticados, veja [1], [6], ou [7].</p>
			</statement>
		</exercise>
	</exercises>
 
	<references xml:id="crypt-references">
		<title>Referências e Leituras Recomendadas</title>

		<biblio type="raw"> <!-- was [1] -->
		Bressoud, D. M. <title>Factorization and Primality Testing</title>. Springer-Verlag, New York, 1989.</biblio>

		<biblio type="raw"> <!-- was [2] -->
		Diffie, W. and Hellman, M. E. <q>New Directions in Cryptography,</q> <title>IEEE Trans. Inform. Theory</title> <volume> 22</volume> (1976), 644<ndash />54.</biblio>

		<!-- Title corrected.  Suggested by R. Beezer.  TWJ - 12/20/2011 -->
		<biblio type="raw"> <!-- was [3] -->
		Gardner, M. <q>Mathematical games: A new kind of cipher that would take millions of years to break,</q> <title>Scientific American</title> <volume>237</volume> (1977), 120<ndash />24.</biblio>

		<biblio type="raw"> <!-- was [4] -->
		Granville, A. <q>Primality Testing and Carmichael Numbers,</q> <title>Notices of the American Mathematical Society</title> <volume>39</volume>(1992), 696<ndash />700.</biblio>

		<biblio type="raw"> <!-- was [5] -->
		Hellman, M. E. <q>The Mathematics of Public Key Cryptography,</q>  <title>Scientific American</title> <volume>241</volume>(1979), 130<ndash />39.</biblio>

		<!-- reference updated - TWJ 5/10/2010 -->
		<biblio type="raw"> <!-- was [6] -->
		Koblitz, N. <title>A Course in Number Theory and Cryptography</title>. 2nd ed. Springer, New York, 1994.</biblio>

		<biblio type="raw"> <!-- was [7] -->
		Pomerance, C., ed. <q>Cryptology and Computational Number Theory</q>, <title>Proceedings of Symposia in Applied Mathematics</title> <volume>42</volume>(1990) American Mathematical Society, Providence, RI.</biblio>

		<biblio type="raw"> <!-- was [8] -->
		Rivest, R. L., Shamir, A., and Adleman, L., <q>A Method for Obtaining Signatures and Public-key Criptosistemas,</q> <title>Comm. ACM</title> <volume>21</volume>(1978), 120<ndash />26.</biblio>

	</references>

	<xi:include href="./sage/crypt-sage.xml" />
	<xi:include href="./sage/crypt-sage-exercises.xml" />

</chapter>
